[bot]
; The name that users will see when interfacing with the bot.
nickname = cl0x
; The username that will be used when registering with the server.
username = cl0x
; The name that will be displayed when people whois the bot.
realname = CClub IRC Bot
; The modules to load into the bot. To enable support for
; NickServ for example, you have to enable the module
; `bones.services.NickServ` by uncommenting it.
modules =
    bones.modules.utilities.Ping
    bones.modules.karma.Karmabot
;    bones.modules.services.NickServ
;    bones.modules.services.HostServ

; If set to true, the bot will automatically join all channels it
; is '/invite'd to.
joinOnInvite = false

; A string of characters that will fire triggers.
; For example, if someone say ".ping" and "." is a trigger prefix,
; the trigger "ping" will be executed.
triggerPrefixes = +

; Set a specific address to be used for connection to the server.
; Can be either IPv4 or IPv6.
;bindAddress = 192.0.2.42

; Custom quit message to use when you shut down the bot
;quitMessage = WELP

[server.chatnode]
; The server address to connect to. Can be either a domain name (IPv4 only),
; an IPv4 address or an IPv6 address (with or without brackets).
host = irc.freenode.net
port = 6667
; If set to true, the bot will use SSL when connecting to
; the server specified above.
useSSL = false
; A list of channels that the bot will join by default
channel = ##cclub-bot
; If set to true, the bot will set +B on itself after
; registering with the server. This will make the phrase
; "nick is a bot" appear when people whois the bot.
setBot = false

[storage]
; URL to the database used by SQLAlchemy (bones.modules.storage.Database)
sqlalchemy.url = sqlite:///bones.db
sqlalchemy.encoding = utf-8
sqlalchemy.convert_unicode = true

[services]
;;
; To activate support for a service, add the module for the
; service to the modules settings of the [bot] section.
;;;
; NickServ module: bones.services.NickServ
;;
; The password specified below is the one we'll use when
; identifying with NickServ. You may want to put your own
; password here though as it would be hard to identify otherwise.
nickserv.password = IAmASkeleton
; Instead of sending a message to NickServ the moment the
; bot gets done with registering, wait for services to ask
; you about identifying with NickServ.
nickserv.waitForNotice = true

;;;
; HostServ module: bones.services.HostServ
;;
; This will prevent joining of channels until the bot have
; received a message from services explaining that the vhost
; have been activated.
hostserv.waitForHost = true

[module.qdb]
; The max number of lines a quote can have before the bot
; will resort to posting a link rather than the quote itself.
maxlinesperquote = 5

[module.UselessResponses]
; Time (in seconds) the dance trigger should require a user to wait
; between each time it is triggered in a channel.
dance.cooldown = 300

;;;
; Logger config
;;;
[loggers]
keys=root,bones
 
[handlers]
keys=fileHandler, consoleHandler
 
[formatters]
keys=bonesFormatter

[logger_root]
; Change the line below to DEBUG if you are having problems with the bot,
; or if you are developing a module as it will help you understand
; what is going on.
level=INFO
handlers=consoleHandler

[logger_bones]
handlers=fileHandler
qualname=bones
 
[handler_consoleHandler]
class=StreamHandler
formatter=bonesFormatter
args=(sys.stdout,)
; The following line reduces console spam by only showing warnings or higher.
; It is recommended to uncomment the following line in production systems.
;level=WARNING
 
[handler_fileHandler]
class=FileHandler
formatter=bonesFormatter
args=("bones.log",)

[formatter_bonesFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=
